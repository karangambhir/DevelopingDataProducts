Shiny
========================================================
author: Karan Gambhir
date: 12 July, 2017
autosize: true


========================================================

This Shiny application is part of the Developing Data Products Coursera course project https://www.coursera.org/learn/data-products/.

We predict an iris flower species using a prediction model trained on the 'iris' databset. https://en.wikipedia.org/wiki/Iris_flower_data_set

Submitted July 12, 2017.
========================================================
Link to the App and Repo


Here's the link to the app
https://karangambhir.shinyapps.io/shiny/

Here's the link to github repository
https://github.com/karangambhir/DevelopingDataProducts/tree/master/X

========================================================
How this Application Works:

1. Use the slider to select the values (i.e Sepal Width,Sepal Length, Petal width and Petal Length) within the given range

2. After selecting the values, click 'Classify my Iris'

3. This will give you the probabilities for the three species (setose, versicolor and virginica) on the right pane

4. To reset the values, click 'Reset'


========================================================
R-Code

Ui.R
```{r echo=FALSE}
library(shiny)

data("iris")
# Define UI for application that draws a histogram
shinyUI(navbarPage("Iris Species Predictor",
                     tabPanel("https://karangambhir.shinyapps.io/shiny/",
                              sidebarPanel(
                                width = 8,
                                
                                h3("Your choices (red lines) against iris dataset values."),
                                
                                fluidRow(
                                  splitLayout(cellWidths = c("50%", "50%"),
                                              plotOutput("plotSepalWidth", height = "180px"),
                                              plotOutput("plotSepalLength", height = "180px")
                                  )),
                                
                                fluidRow(
                                  splitLayout(cellWidths = c("50%", "50%"),
                                              sliderInput("sepalWidth", 
                                                          "Sepal Width:", 
                                                          min = round(min(iris$Sepal.Width) / 2, 1),
                                                          max = round(max(iris$Sepal.Width) * 1.25, 1),
                                                          value = round(mean(iris$Sepal.Width), 1)),
                                              sliderInput("sepalLength", 
                                                          "Sepal Length:",
                                                          min = round(min(iris$Sepal.Length) / 2, 1),
                                                          max = round(max(iris$Sepal.Length) * 1.25, 1),
                                                          value = round(mean(iris$Sepal.Length), 1))
                                  )),
                                
                                fluidRow(
                                  splitLayout(cellWidths = c("50%", "50%"),
                                              plotOutput("plotPetalWidth", height = "180px"),
                                              plotOutput("plotPetalLength", height = "180px")
                                  )),
                                
                                fluidRow(
                                  splitLayout(cellWidths = c("50%", "50%"),
                                              sliderInput("petalWidth", 
                                                          "Petal Width:", 
                                                          min = round(min(iris$Petal.Width) / 2, 1),
                                                          max = round(max(iris$Petal.Width) * 1.25, 1),
                                                          value = round(mean(iris$Petal.Width), 1)),
                                              sliderInput("petalLength", 
                                                          "Petal Length:",
                                                          min = round(min(iris$Petal.Length) / 2, 1),
                                                          max = round(max(iris$Petal.Length) * 1.25, 1),
                                                          value = round(mean(iris$Petal.Length ), 1))
                                  )),
                                
                                actionButton(
                                  inputId = "submitBtn",
                                  label = "Classify My Iris"
                                ),
                                
                                actionButton(
                                  inputId = "resetBtn",
                                  label = "Reset"
                                )
                              ),
                              
                              mainPanel(
                                width = 4,
                                tabsetPanel(
                                  tabPanel(p(icon("table"), "Classify Your Iris"),                             
                                           h1("Prediction"),
                                           h3("Shown as probabilities for each species."),
                                           p("Choose your measurements and hit 'Classify My Iris'."),
                                           tableOutput("prediction")
                                  ),
                                  
                                  tabPanel(p(icon("table"), "Prediction Model"),
                                           
                                           h1("Prediction Model"),
                                           p("Predictions are based on a random forests model trained against the complete iris dataset. For more details view source on GitHub:"),
                                           a(href = "http://github.com",
                                             "http://github.com",
                                             target = "_blank"),
                                           
                                           h2("Dataset"),
                                           p("The prediction model was trained on the Iris Dataset:"),
                                           a(href = "https://en.wikipedia.org/wiki/Iris_flower_data_set",
                                             "https://en.wikipedia.org/wiki/Iris_flower_data_set",
                                             target = "_blank"),
                                           h3("str(iris)"),
                                           tableOutput("oStr")
                                  )
                                )
                              )
                     ),
                     
                     tabPanel(p(icon("info"), "About"),
                             mainPanel(
                              includeMarkdown("about.Rmd")))
                     
)
)


```

server.R
```{r echo=FALSE}
library(shiny)

data("iris")
if(!("lattice" %in% rownames(installed.packages()))) {
  install.packages("lattice")
}
library(lattice)

if(!("ggplot2" %in% rownames(installed.packages()))) {
  install.packages("ggplot2")
}
library(ggplot2)

if(!("e1071" %in% rownames(installed.packages()))) {
  install.packages("e1071")
}
library(e1071)

if(!("caret" %in% rownames(installed.packages()))) {
  install.packages("caret")
}
library(caret)

if(!("randomForest" %in% rownames(installed.packages()))) {
  install.packages("randomForest")
}
library(randomForest)

#####
# Random Forest classificator
#####
set.seed(777)

buildRFModel <- function() {
  fitControl <- trainControl(method = "cv", number = 5)
  fitRF <- train(Species ~ ., data = iris,
                 method = "rf",
                 trControl = fitControl)
  print(timestamp())
  return(fitRF)
}

predictIris <- function(trainedModel, inputs) {
  prediction <- predict(trainedModel,
                        newdata = inputs,
                        type = "prob",
                        predict.all = TRUE)
  #return(renderText(levels(iris$Species)[prediction]))
  return(renderTable(prediction))
}

shinyServer(
  function(input, output, session) {
    
    data(iris)
    
    myStr <- capture.output(str(iris))
    myStr <- paste(myStr, collapse = "<br/>")
    output$oStr <- renderText(myStr)
    
    output$outputSepalWidth <- renderText(input$sepalWidth)
    output$outputSepalLength <- renderText(input$sepalLength)
    output$outputPetalWidth <- renderText(input$petalWidth)
    output$outputPetalLength <- renderText(input$petalLength)
    
    output$outputSepalWidthSD <- renderText(sd(iris$Sepal.Width))
    output$outputSepalLengthSD <- renderText(sd(iris$Sepal.Length))
    output$outputPetalWidthSD <- renderText(sd(iris$Petal.Width))
    output$outputPetalLengthSD <- renderText(sd(iris$Petal.Length))
    
    output$outputSepalWidthMean <- renderText(mean(iris$Sepal.Width))
    output$outputSepalLengthMean <- renderText(mean(iris$Sepal.Length))
    output$outputPetalWidthMean <- renderText(mean(iris$Petal.Width))
    output$outputPetalLengthMean <- renderText(mean(iris$Petal.Length))
    
    output$plotSepalWidth <- renderPlot({
      ggplot(iris, aes(x = Sepal.Width,
                       group = Species,
                       fill = as.factor(Species))) + 
        geom_density(position = "identity", alpha = 0.5) +
        scale_fill_discrete(name = "Species") +
        theme_bw() +
        xlab("Sepal Width") +
        geom_vline(xintercept = input$sepalWidth,
                   color = "red",
                   size = 2) +
        scale_x_continuous(limits = c(round(min(iris$Sepal.Width) / 2, 1),
                                      round(max(iris$Sepal.Width) * 1.25, 1)))
      
    })
    
    output$plotSepalLength <- renderPlot({
      ggplot(iris, aes(x = Sepal.Length,
                       group = Species,
                       fill = as.factor(Species))) + 
        geom_density(position = "identity", alpha = 0.5) +
        scale_fill_discrete(name = "Species") +
        theme_bw() +
        xlab("Sepal Length") +
        geom_vline(xintercept = input$sepalLength,
                   color = "red",
                   size = 2) +
        scale_x_continuous(limits = c(round(min(iris$Sepal.Length) / 2, 1),
                                      round(max(iris$Sepal.Length) * 1.25, 1)))
      
    })
    
    output$plotPetalWidth <- renderPlot({
      ggplot(iris, aes(x = Petal.Width,
                       group = Species,
                       fill = as.factor(Species))) + 
        geom_density(position = "identity", alpha = 0.5) +
        scale_fill_discrete(name = "Species") +
        theme_bw() +
        xlab("Petal Width") +
        geom_vline(xintercept = input$petalWidth,
                   color = "red",
                   size = 2) +
        scale_x_continuous(limits = c(round(min(iris$Petal.Width) / 2, 1),
                                      round(max(iris$Petal.Width) * 1.25, 1)))
      
    })
    
    output$plotPetalLength <- renderPlot({
      ggplot(iris, aes(x = Petal.Length,
                       group = Species,
                       fill = as.factor(Species))) + 
        geom_density(position = "identity", alpha = 0.5) +
        scale_fill_discrete(name = "Species") +
        theme_bw() +
        xlab("Petal Length") +
        geom_vline(xintercept = input$petalLength,
                   color = "red",
                   size = 2) +
        scale_x_continuous(limits = c(round(min(iris$Petal.Length) / 2, 1),
                                      round(max(iris$Petal.Length) * 1.25, 1)))
      
    })
    
    builtModel <- reactive({
      buildRFModel()
    })
    
    observeEvent(
      eventExpr = input[["submitBtn"]],
      handlerExpr = {
        withProgress(message = 'Just a moment...', value = 0, {
          myModel <- builtModel()
        })
        Sepal.Length <- input$sepalLength
        Sepal.Width <- input$sepalWidth
        Petal.Length <- input$petalLength
        Petal.Width <- input$petalWidth
        myEntry <- data.frame(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
        
        myPrediction <- predictIris(myModel, myEntry)
        output$prediction <- myPrediction
      })
    
    observeEvent(input[["resetBtn"]], {
      updateNumericInput(session, "sepalWidth", value = round(mean(iris$Sepal.Width), 1))
      updateNumericInput(session, "sepalLength", value = round(mean(iris$Sepal.Length), 1))
      updateNumericInput(session, "petalWidth", value = round(mean(iris$Petal.Width), 1))
      updateNumericInput(session, "petalLength", value = round(mean(iris$Petal.Length), 1))
    })
  }
)
```

